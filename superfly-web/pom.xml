<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <parent>
        <artifactId>superfly-parent</artifactId>
        <groupId>com.payneteasy.superfly</groupId>
        <version>2.0-1</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>superfly-web</artifactId>
    <packaging>war</packaging>
    <name>Superfly server web-application</name>
    <description>Contains Superfly UI and server-side components implementing Superfly services for clients</description>
    <dependencies>
        <dependency>
            <!--Justification: Core service implementation for SuperFly authentication/authorization -->
            <groupId>com.payneteasy.superfly</groupId>
            <artifactId>superfly-service</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Client library with optional features for SuperFly interaction -->
            <groupId>com.payneteasy.superfly</groupId>
            <artifactId>superfly-client-opt</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Spring Security integration for SuperFly authentication/authorization -->
            <groupId>com.payneteasy.superfly</groupId>
            <artifactId>superfly-spring-security</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Cryptography support for SuperFly, handling secure data operations -->
            <groupId>com.payneteasy.superfly</groupId>
            <artifactId>superfly-crypto</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Wicket integration for SuperFly for building web applications -->
            <groupId>com.payneteasy.superfly</groupId>
            <artifactId>superfly-wicket</artifactId>
        </dependency>


        <dependency>
            <!--Justification: Web-related functionality in Spring -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>
        <dependency>
            <!--Justification: MVC framework for building web applications -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Central interface to the Spring IoC container -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Provides the Servlet API, necessary for web applications; marked as provided since it's provided by the servlet container -->
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Core functionality for Spring Security; managing authentication, authorization, and security configurations -->
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Provides configuration support for Spring Security, enabling security annotations and configuration methods -->
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Provides web security functionality and access control for web applications -->
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Quartz is a powerful and flexible job scheduling library, used for executing background tasks in Java applications -->
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
        </dependency>

        <dependency>
            <!--Justification: Required for XRemoting functionality-->
            <groupId>com.googlecode.xremoting</groupId>
            <artifactId>xremoting-core</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Provides XML serialization capabilities-->
            <groupId>com.thoughtworks.xstream</groupId>
            <artifactId>xstream</artifactId>
        </dependency>

        <dependency>
            <!--Justification: Used for Hessian serialization-->
            <groupId>com.caucho</groupId>
            <artifactId>hessian</artifactId>
        </dependency>

        <!-- WICKET DEPENDENCIES -->
        <dependency>
            <!--Justification: Render html UI-->
            <groupId>org.apache.wicket</groupId>
            <artifactId>wicket</artifactId>
            <type>pom</type>
        </dependency>
        <dependency>
            <!--Justification: Integration between wicket and spring IOC-->
            <groupId>org.apache.wicket</groupId>
            <artifactId>wicket-spring</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Additional UI components for wicket framework-->
            <groupId>org.apache.wicket</groupId>
            <artifactId>wicket-extensions</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Core Wicket testers for Unit Tests. -->
            <groupId>org.apache.wicket</groupId>
            <artifactId>wicket-tester</artifactId>
        </dependency>
        <!--  JETTY DEPENDENCIES FOR TESTING  -->
        <dependency>
            <!--Justification: Jetty server for testing purposes -->
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <!--Justification: Provides utility classes for Jetty server, enhancing operational capabilities -->
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-util</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <!--Justification: Adds support for Jetty's advanced features, including integration with JNDI, EJB, etc. -->
            <groupId>org.eclipse.jetty.ee10</groupId>
            <artifactId>jetty-ee10-plus</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <!--Justification: Jetty web application support. -->
            <groupId>org.eclipse.jetty.ee10</groupId>
            <artifactId>jetty-ee10-webapp</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty.ee10</groupId>
            <artifactId>jetty-ee10-jndi</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <!--Justification: MySQL database connectivity -->
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!--Justification: Commons Database Connection Pooling -->
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!--Justification:  Commons Object Pooling Library-->
            <groupId>commons-pool</groupId>
            <artifactId>commons-pool</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!--Justification: Logback implementation for SLF4J, provides logging capabilities -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Core library for Logback, necessary for logging configurations and functionality -->
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object. -->
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>
        <dependency>
            <!--Justification: Lombok simplifies Java development by automating boilerplate code generation, reducing manual effort, and minimizing errors. -->
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <filtering>false</filtering>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <filtering>false</filtering>
                <directory>src/main/java</directory>
                <includes>
                    <include>**</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <filtering>false</filtering>
                <directory>src/test/resources</directory>
            </testResource>
            <testResource>
                <filtering>false</filtering>
                <directory>src/test/java</directory>
                <includes>
                    <include>**</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </testResource>
        </testResources>
        <finalName>superfly</finalName>
    </build>

</project>
